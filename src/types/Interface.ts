// Generated by https://quicktype.io

export interface Projects {
  projects: Project[];
}

export interface Project {
  projectName: string;
  projectId?: string;
  estimatedBy?: string;
  estimationDate?: Object;
  verifiedBy?: string;
  verificationDate?: string;
  estStart?: string;
  estEns?: string;
  teamSize?: number;
  timeBudget?: number;
  effort?: number;
  sections: Section[];
  rawDevelopmentEffortSum?: RawDevelopmentEffortSum;
  summary?: Main[];
  assumptions?: Assumption[];
}

export interface Assumption {
  id: number;
  text: string;
}

export interface RawDevelopmentEffortSum {
  name: string;
  main: Main;
  parts: Part[];
}

export interface Main {
  minMd?: number;
  minMdFormula?: string;
  maxMd?: number;
  maxMdFormula?: string;
  predictedMd?: number;
  predictedMdFormula?: string;
  risk?: number;
  riskFormula?: string;
  name?: string;
  estDeliveryDate?: string;
}

export interface Part {
  name: string;
  procent: number;
  role: string;
  minMd: number;
  minMdFormula: string;
  maxMd: number;
  maxMdFormula: string;
  predictedMd: number;
  predictedMdFormula: string;
}
export interface Total {
  name: string;
  minMd: number;
  minMdFormula: string;
  maxMd: number;
  maxMdFormula: string;
  predictedMd: number;
}

export interface Section {
  sectionId?: string;
  name: string;
  minMd: number;
  minMdFormula: string;
  maxMd: number;
  maxMdFormula: string;
  predictedMd: number;
  predictedMdFormula: string;
  risk: number;
  riskFormula: string;
  tasks: Task[];
}

export interface Task {
  id: string;
  type: Type;
  name: string;
  role: Role;
  minMd: number | null;
  maxMd: number | null;
  predictedMd: number | null;
  predictedMdFormula: string;
  risk: string;
  comment: Comment;
  subtasks?: Task[];
}

export interface Comment {
  text: string;
  isImportant: boolean;
}

export enum Role {
  Empty = "",
  FD = "FD",
  BD = "BD",
  MD = "MD",
  UD = "UD",
  DO = "DO",
}

export enum Type {
  Group = "group",
  Task = "task",
}

<<<<<<< HEAD
export interface Params {
  projectId: string;
}
=======
export interface RiskMultiplicator {
  [key: string]: number;
}

export enum Multiplicators {
  L = "L",
  M = "M",
  H = "H",
}

export enum PressableKeys {
  ENTER = "Enter",
  ESCAPE = "Escape",
  CONTROL = "Control",
  DELETE = "Delete",
}
export interface Params {
  projectId: string;
}

export enum Fields {
  SECTION_ID = "sectionId",
  NAME = "name",
  ROLE = "role",
  MIN_MD = "minMd",
  MAX_MD = "maxMd",
  PREDICTED_MD = "predictedMd",
  RISK = "risk",
}

export interface RowField {
  [key: string]: string;
}
export interface Row {
  name: RowField;
  role: RowField;
}
>>>>>>> 952693c9039ea67bfce8bc7c4fd023d580fceb1e
